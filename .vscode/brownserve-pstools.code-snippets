{
    "Brownserve PowerShell Module": {
		"prefix": ["module","brownserve"],
		"body": [
			"<#",
			".SYNOPSIS",
			"    ${1:Enter a brief description of what this module does/contains.}",
			"#>",
			"#Requires -Version 6.0",
			"#Requires -Module Brownserve.PSTools",
			"[CmdletBinding()]",
			"param()",
			"\\$ErrorActionPreference = 'Stop'",
			"",
			"# We use some special variables for working out what cmdlets are compatible with a users systems",
			"\\$PublicCmdlets = @()",
			"",
			"# Dot source our private functions so they are available for our public functions to use",
			"Join-Path \\$PSScriptRoot -ChildPath 'Private' |",
			"    Resolve-Path |",
			"        Get-ChildItem -Filter *.ps1 -Recurse |",
			"            ForEach-Object {",
			"                . \\$_.FullName",
			"            }",
			"",
			"# Dot source our public functions and then add their help information to an array",
			"Join-Path \\$PSScriptRoot -ChildPath 'Public' |",
			"    Resolve-Path |",
			"        Get-ChildItem -Filter *.ps1 -Recurse |",
			"            ForEach-Object {",
			"                . \\$_.FullName",
			"                Export-ModuleMember \\$_.BaseName",
			"                \\$PublicCmdlets += Get-Help \\$_.BaseName",
			"            }",
			"",
			"<# ",
			"    If our special variable exists then add these cmdlets to said variable so we can output their summary later on.",
            "    Unfortunately just checking for the existence of the variable isn't enough as if it's blank PowerShell seems to treat it as null :(",
			"#>",
			"if (\\$Global:BrownserveCmdlets -is 'System.Array')",
			"{",
			"    \\$Global:BrownserveCmdlets += @{",
			"        Module = \"\\$(\\$MyInvocation.MyCommand)\"",
			"        Cmdlets = \\$PublicCmdlets",
			"    }",
			"}",
			"else",
			"{",
			"    Write-Host \"The following cmdlets from \\$(\\$MyInvocation.MyCommand) are now available for use:\" -ForegroundColor White",
			"    \\$PublicCmdlets | ForEach-Object {",
			"        Write-Host \"    \\$(\\$_.Name) \" -ForegroundColor Magenta -NoNewline; Write-Host \"|  \\$(\\$_.Synopsis)\" -ForegroundColor Blue",
			"    }",
			"    Write-Host \"For more information please use the 'Get-Help <command-name>' command`n\"",
			"}"
		],
		"description": "A template for creating PowerShell modules that are in the Brownserve standard format"
	},
    "Brownserve Build Script": {
		"prefix": ["build","brownserve"],
		"body": [
			"<#",
			".SYNOPSIS",
			"    ${1:Give a brief summary of what this build does}",
			"#>",
			"[CmdletBinding()]",
			"param ()",
			"# Always stop on errors",
			"\\$ErrorActionPreference = 'Stop'",
			"",
			"Write-Host \"Starting build \\$(\\$MyInvocation.MyCommand)\"",
			"",
			"# dot source the _init.ps1 script",
			"try",
			"{",
			"    Write-Verbose \"Initialising repo\"",
			"    \\$initScriptPath = Join-Path \\$PSScriptRoot -ChildPath '_init.ps1' | Convert-Path",
			"    . \\$initScriptPath",
			"}",
			"catch",
			"{",
			"    Write-Error \"Failed to init repo.`n\\$(\\$_.Exception.Message)\"",
			"}",
			"",
			"${2:# Insert your custom build steps here}",
			"",
			"Write-Host \"Build \\$(\\$MyInvocation.MyCommand) completed successfully! ðŸŽ‰\" -ForegroundColor Green"
		],
		"description": "A template for creating a simple build script using the Brownserve standard format"
	}
}